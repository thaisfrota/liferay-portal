@component-name = "data-engine"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Data Engine";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeFieldNames = "Color",
			dmDocumentTypeName = "DM Document Type Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			User.logoutPG();
		}
	}

	@description = "This is a test for LPS-98070. As a Developer, I want to Implement the color field type"
	@priority = "5"
	test DeleteColorFieldOnBuilder {
		property portal.acceptance = "false";

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Type Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.delete(fieldFieldLabel = "Color");

		DDLDataDefinition.save();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Type Name");

		AssertElementNotPresent(
			key_fieldFieldLabel = "Color",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER");
	}

	@description = "This is a test for LPS-98070. As a Developer, I want to Implement the color field type"
	@priority = "4"
	test DuplicateColorFieldOnBuilder {
		property portal.acceptance = "false";

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Color",
			dmDocumentTypeName = "DM Document Type Name");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Type Name");

		DataEngine.duplicate(fieldFieldLabel = "Color");

		DDLDataDefinition.save();

		NavItem.click(navItem = "Documents and Media");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		AssertElementPresent(
			key_fieldFieldLabel = "Color",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		AssertElementPresent(
			key_fieldFieldLabel = "Copy of Color",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@description = "This is a test for LPS-98070. As a Developer, I want to Implement the color field type"
	@ignore = "true"
	@priority = "3"
	test EditColorFieldNameWithInvalidCharacters {
		property portal.acceptance = "false";

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		DataEngine.editFieldReference(
			assertFieldReference = "ColorTest1",
			fieldFieldLabel = "Color",
			fieldReference = "%Color*Test @1");

		DDLDataDefinition.save();

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = "Color",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = "Color");

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertTextEquals.assertValue(
			key_fieldLabel = "Field Reference",
			key_fieldName = "fieldReference",
			locator1 = "Sidebar#TEXT_INPUT",
			value1 = "ColorTest1");
	}

	@description = "This is a test for LPS-98070. As a Developer, I want to Implement the color field type"
	@priority = "4"
	test EditColorFieldNameWithValidCharacters {
		property portal.acceptance = "false";

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		DataEngine.editFieldReference(
			assertFieldReference = "Color_Test",
			fieldFieldLabel = "Color",
			fieldReference = "Color_Test");

		DDLDataDefinition.save();

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = "Color",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = "Color");

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertTextEquals.assertValue(
			key_fieldLabel = "Field Reference",
			key_fieldName = "fieldReference",
			locator1 = "Sidebar#TEXT_INPUT",
			value1 = "Color_Test");
	}

	@description = "This is a test for LPS-98070. As a Developer, I want to Implement the color field type"
	@priority = "4"
	test EditHelpTextOfColorField {
		property portal.acceptance = "false";

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		DataEngine.editFieldTip(
			fieldFieldLabel = "Color",
			fieldHelp = "Help Test");

		DDLDataDefinition.save();

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		DataEngine.viewField(
			fieldFieldLabel = "Color",
			fieldHelp = "Help Test",
			fieldName = "Color");
	}

	@description = "This is a test for LPS-98070. As a Developer, I want to Implement the color field type"
	@priority = "5"
	test EditLabelOfColorField {
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Color",
			dmDocumentTypeName = "DM Document Type Name");

		DMDocumentType.edit(
			dmDocumentTypeName = "DM Document Type Name",
			fieldFieldLabel = "Color",
			fieldFieldLabelEdit = "Color Test Name");

		Navigator.gotoNavItem(navItem = "Documents and Media");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		AssertElementPresent(
			key_fieldFieldLabel = "Color Test Name",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@description = "This is a test for LPS-98070. As a Developer, I want to Implement the color field type"
	@priority = "4"
	test SetColorFieldAsRequired {
		property portal.acceptance = "false";

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Color",
			dmDocumentTypeName = "DM Document Type Name");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Type Name");

		DataEngine.editFieldRequired(fieldFieldLabel = "Color");

		DDLDataDefinition.save();

		NavItem.click(navItem = "Documents and Media");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		PortletEntry.inputTitle(title = "DM Title Test");

		Button.clickPublish();

		AssertTextEquals(
			key_fieldFieldLabel = "Color",
			locator1 = "WCEditWebContent#FIELD_REQUIRED_ALERT",
			value1 = "This field is required.");
	}

	@description = "This is a test for LPS-98070. As a Developer, I want to Implement the color field type"
	@ignore = "true"
	@priority = "5"
	test SetColorWithHex {
		property portal.acceptance = "false";

		// TODO LPS-98070 SetColorWithHex pending implementation

	}

	@description = "This is a test for LPS-98070. As a Developer, I want to Implement the color field type"
	@priority = "5"
	test SetColorWithPicker {
		property portal.acceptance = "false";

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Color",
			dmDocumentTypeName = "DM Document Type Name");

		NavItem.click(navItem = "Documents and Media");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		PortletEntry.inputTitle(title = "DM Title Test");

		DMDocument.selectColorRGB(
			blueValue = "0",
			fieldLabel = "Color",
			greenValue = "0",
			redValue = "255");

		Button.clickPublish();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Title Test");

		AssertTextEquals(
			key_fieldLabel = "Color",
			locator1 = "DDMField#COLOR_PICKER_GENERAL_INPUT",
			value1 = "ff0000");
	}

	@description = "This is a test for LPS-98070. As a Developer, I want to Implement the color field type"
	@priority = "4"
	test SetSearchablePropertyOfColorField {
		property portal.acceptance = "false";

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		DataEngine.editFieldSearchable(
			fieldFieldLabel = "Color",
			searchableType = "Disable");

		DDLDataDefinition.save();

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		DataEngine.viewFieldSearchable(
			fieldFieldLabel = "Color",
			searchableType = "Disable");

		DataEngine.editFieldSearchable(
			fieldFieldLabel = "Color",
			searchableType = "Keyword");

		DDLDataDefinition.save();

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		DataEngine.viewFieldSearchable(
			fieldFieldLabel = "Color",
			searchableType = "Keyword");
	}

}