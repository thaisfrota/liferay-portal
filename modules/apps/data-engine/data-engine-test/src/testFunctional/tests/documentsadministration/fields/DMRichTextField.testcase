@component-name = "data-engine"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Data Engine";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "New Document Type");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "5"
	test DragAndDropRichTextToBuilder {
		property portal.acceptance = "false";

		DataEngine.addField(
			fieldFieldLabel = "Rich Text Dropped",
			fieldName = "Rich Text");

		DataEngine.viewField(
			fieldFieldLabel = "Rich Text Dropped",
			fieldName = "Rich Text");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "5"
	test InsertTextOnRichTextOnUpload {
		property portal.acceptance = "false";

		DataEngine.addField(
			fieldFieldLabel = "Insert Text",
			fieldName = "Rich Text");

		PortletEntry.save();

		Navigator.gotoNavTab(navTab = "Documents and Media");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "New Document Type");

		DMDocument.editCmd(dmDocumentTitleEdit = "Test Rich Text");

		CKEditor.addContentInWebContent(
			content = "Inserting a new Text",
			fieldLabel = "Insert Text");

		Button.clickPublish();

		DMDocumentType.selectDocumentTypeFrame();

		LexiconEntry.openEntryMenu(rowEntry = "Test Rich Text");

		MenuItem.click(menuItem = "Edit");

		SelectFrame.selectFrameNoLoading(
			key_fieldLabel = "Insert Text",
			locator1 = "CKEditor#BODY_FIELD_IFRAME");

		AssertTextEquals(
			locator1 = "CKEditor#BODY",
			value1 = "Inserting a new Text");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test LocalizationOfRichTextPersists {
		property portal.acceptance = "false";

		DataEngine.addField(
			fieldFieldLabel = "Rich Text",
			fieldName = "Rich Text");

		DataEngine.editFieldTip(
			fieldFieldLabel = "Rich Text",
			fieldHelp = "Help");

		PortletEntry.changeLocale(locale = "pt_BR");

		PortletEntry.inputName(name = "My Document pt_BR");

		FormViewBuilder.editFieldLabel(
			fieldLabel = "Rich Text",
			label = "Rich Texto");

		DataEngine.editFieldTip(
			fieldFieldLabel = "Rich Texto",
			fieldHelp = "Ajuda");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "New Document Type");

		PortletEntry.changeLocale(locale = "pt_BR");

		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = "My Document pt_BR");

		FormFields.viewTextLabel(
			fieldLabel = "Rich Texto",
			fieldName = "Rich Text");

		FormFields.viewFieldHelpText(
			fieldHelpText = "Ajuda",
			fieldName = "Rich Text");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "5"
	test RepeatRichTextOnUpload {
		property portal.acceptance = "quarantine";

		DataEngine.addField(
			fieldFieldLabel = "Repeatable Rich Text",
			fieldName = "Rich Text");

		DataEngine.editFieldRepeatable(fieldFieldLabel = "Repeatable Rich Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentsAndMedia();

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "New Document Type");

		PortletEntry.inputTitle(title = "Document with Repeated Field");

		DataEngine.addRepeatableField(fieldName = "Repeatable Rich Text");

		PortletEntry.publish();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Document with Repeated Field");

		DataEngine.assertFieldRepeated(
			fieldName = "Repeatable Rich Text",
			index = "2");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test SetFieldReferenceOfRichText {
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "New Document Type");

		var referenceDT = "ReferenceText";

		DataEngine.addField(
			fieldFieldLabel = "Test",
			fieldName = "Rich Text");

		DataEngine.editFieldReference(
			assertFieldReference = "${referenceDT}",
			fieldFieldLabel = "Test",
			fieldReference = "${referenceDT}");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "New Document Type");

		DataEngine.viewFieldReference(
			fieldFieldLabel = "Test",
			fieldName = "Rich Text",
			fieldReference = "${referenceDT}");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "3"
	test SetFieldReferenceOfRichTextWithInvalidCharacters {
		var richTextValue = "Rich Text";
		var dmDocumentTitle = "New Document Type";
		var fieldReferenceWithInvalidChars = "Myreference@#$%Â¨&*";

		DataEngine.addField(
			fieldFieldLabel = "${richTextValue}",
			fieldName = "${richTextValue}");

		Button.clickSave();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

		DataEngine.editFieldReference(
			assertFieldReference = "Myreference",
			fieldFieldLabel = "${richTextValue}",
			fieldName = "${richTextValue}",
			fieldReference = "${fieldReferenceWithInvalidChars}");

		Button.clickSave();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

		DataEngine.viewFieldReference(
			fieldFieldLabel = "${richTextValue}",
			fieldName = "${richTextValue}",
			fieldReference = "Myreference");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "5"
	test SetHelpTextOfRichText {
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "New Document Type");

		DataEngine.addField(
			fieldFieldLabel = "FieldTest",
			fieldName = "Rich Text");

		DataEngine.editFieldTip(
			fieldFieldLabel = "FieldTest",
			fieldHelp = "Test Help Text");

		PortletEntry.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "New Document Type");

		DataEngine.viewField(
			fieldFieldLabel = "FieldTest",
			fieldHelp = "Test Help Text",
			fieldName = "Rich Text");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "5"
	test SetLabelOfRichText {
		property portal.acceptance = "false";

		DataEngine.addField(
			fieldFieldLabel = "Edited Test",
			fieldName = "Rich Text");

		Button.clickSave();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "New Document Type");

		DataEngine.viewField(
			fieldFieldLabel = "Edited Test",
			fieldName = "Rich Text");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test SetRichTextAsRepeatable {
		property portal.acceptance = "false";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentType();

		DMDocumentType.addWithoutSave(
			dmDocumentTypeFieldNames = "Rich Text",
			dmDocumentTypeName = "DM Document Type Name");

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = "Rich Text",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = "Rich Text");

		FormViewBuilder.switchToAdvancedTab();

		DataEngine.editFieldRepeatable(fieldFieldLabel = "Rich Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type Name");

		AssertElementPresent(locator1 = "FormFields#FIELD_ADD_DUPLICATE");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test SetRichTextSearchableByText {
		DataEngine.addField(
			fieldFieldLabel = "Rich Text",
			fieldName = "Rich Text");

		DataEngine.editFieldSearchable(
			fieldFieldLabel = "Rich Text",
			searchableType = "Disable");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "New Document Type");

		DataEngine.editFieldSearchable(
			fieldFieldLabel = "Rich Text",
			searchableType = "Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "New Document Type");

		DataEngine.viewFieldSearchable(
			fieldFieldLabel = "Rich Text",
			searchableType = "Text");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "3"
	test ShowAndHideRichTextLabel {
		DataEngine.addField(
			fieldFieldLabel = "Rich Text",
			fieldName = "Rich Text");

		DataEngine.editShowOrHideLabel(
			fieldFieldLabel = "Rich Text",
			showLabel = "false");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "New Document Type");

		AssertElementNotPresent(
			key_fieldFieldLabel = "Rich Text",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		DataEngine.editShowOrHideLabel(
			fieldLabelHidden = "true",
			showLabel = "true");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "New Document Type");

		AssertVisible(
			key_fieldFieldLabel = "Rich Text",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "5"
	test UploadDocumentTypetWithRequiredRichText {
		DataEngine.addField(
			fieldFieldLabel = "Test Upload",
			fieldName = "Rich Text");

		DataEngine.editFieldRequired(fieldFieldLabel = "Test Upload");

		DDLDataDefinition.save();

		Navigator.gotoNavTab(navTab = "Documents and Media");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "New Document Type");

		PortletEntry.inputTitle(title = "DM Name");

		CKEditor.addContentInWebContent(
			content = "Hello",
			fieldLabel = "Test Upload");

		Button.clickPublish();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test UploadWithRequiredRichText {
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "New Document Type");

		DataEngine.addField(
			fieldFieldLabel = "Test",
			fieldName = "Rich Text");

		DDLDataDefinition.save();

		DMDocumentType.edit(
			dmDocumentTypeFieldRequiredEdit = "Test",
			dmDocumentTypeName = "New Document Type");

		Navigator.gotoNavItem(navItem = "Documents and Media");

		DMDocument.addCP(
			dmDocumentTitle = "New Document Title",
			dmDocumentTypeName = "New Document Type");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#WARNING_FEEDBACK",
			value1 = "This field is required.");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test VerifyRequiredPropertyOfRichText {
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.addWithoutSave(
			dmDocumentTitle = "VerifyRequiredTest",
			dmDocumentTypeFieldNames = "Rich Text",
			dmDocumentTypeName = "VerifyRequiredTest");

		AssertElementNotPresent(locator1 = "FormViewBuilder#FORM_FIELD_REQUIRED_ITEM");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "VerifyRequiredTest");

		DataEngine.viewField(
			fieldFieldLabel = "Rich Text",
			fieldName = "Rich Text");

		Check.checkToggleSwitch(
			checkboxName = "Required Field",
			locator1 = "Checkbox#ANY_CHECKBOX");

		AssertElementPresent(locator1 = "FormViewBuilder#FORM_FIELD_REQUIRED_ITEM");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test VerifyRichFieldHelpTextOnUpload {
		property portal.upstream = "quarantine";

		DMNavigator.gotoDocumentType();

		DMDocumentType.addWithoutSave(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Upload",
			dmDocumentTypeName = "DM Document Type Name");

		DataEngine.editFieldTip(
			fieldFieldLabel = "Upload",
			fieldHelp = "${fieldHelp}");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type Name");

		DMDocumentType.gotoEditField(fieldName = "Upload");

		var key_fieldFieldLabel = "Help Text";

		AssertTextEquals(
			locator1 = "DDMEditStructure#SETTINGS_TEXT",
			value1 = "${fieldHelp}");
	}

	@description = "This is a test for LPS-98076. As a Developer, I want to Implement the HTML field type"
	@priority = "4"
	test VerifyRichTextIsSetAsRequiredOnUploading {
		property portal.acceptance = "false";

		var fieldLabel = "Rich Text";

		JSONGroup.addGroup(groupName = "Test Site Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");
		var dmDocumentTypeName = "WC Structure Name";
		var fieldHelp = "Help Text On Upload";

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.addWithoutSave(
			dmDocumentTypeFieldNames = "${fieldLabel}",
			dmDocumentTypeName = "DM Document Type Name");

		DataEngine.editFieldRequired(fieldFieldLabel = "${fieldLabel}");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentsAndMedia();

		LexiconEntry.gotoAdd();

		MenuItem.click(menuItem = "DM Document Type Name");

		AssertElementPresent(locator1 = "FormViewBuilder#FIELD_LABEL_REQUIRED");
	}

}